name: "Terraform Destroy"
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to destroy"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production
      confirm_destroy:
        description: 'Type "destroy-{environment}" to confirm (e.g., destroy-development)'
        required: true
        type: string
permissions:
  contents: read
  pull-requests: write
env:
  AWS_REGION: "us-west-2"
  TF_LOG: info
  TERRAFORM_WORKING_DIR: "src/terraform"
jobs:
  terraform-destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.confirm_destroy == format('destroy-{0}', github.event.inputs.environment)
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Verify AWS Credentials
        run: aws sts get-caller-identity
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
      - name: Remove EKS kubeconfig
        if: always()
        continue-on-error: true
        run: |
          rm -rf ~/.kube/config
          rm -rf ~/.kube/cache
      - name: Check Node Groups Status
        id: check_nodegroups
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          CLUSTER_NAME="airflow-cluster"
          echo "Checking node groups for cluster $CLUSTER_NAME..."
          aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region ${{ env.AWS_REGION }} || true
        continue-on-error: true
      - name: Destroy Node Groups with AWS CLI
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          CLUSTER_NAME="airflow-cluster"
          NODEGROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region ${{ env.AWS_REGION }} --query 'nodegroups[*]' --output text || echo "")

          if [ ! -z "$NODEGROUPS" ]; then
            echo "Found node groups: $NODEGROUPS"
            for ng in $NODEGROUPS; do
              echo "Deleting node group: $ng"
              aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region ${{ env.AWS_REGION }}
            done
            
            echo "Waiting for node groups to be deleted..."
            for ng in $NODEGROUPS; do
              while aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region ${{ env.AWS_REGION }} 2>/dev/null; do
                echo "Waiting for node group $ng to be deleted..."
                sleep 30
              done
            done
          fi
        continue-on-error: true
      - name: Wait After Node Group Deletion
        run: |
          echo "Waiting additional time after node group deletion..."
          sleep 60
      - name: Terraform State Refresh
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform refresh
        continue-on-error: true
      - name: Destroy Remaining Resources
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          echo "Destroying remaining resources..."
          terraform destroy -auto-approve -input=false \
            -var="environment=${{ github.event.inputs.environment }}"
      - name: Clean up Terraform state
        if: success()
        continue-on-error: true
        run: |
          aws s3 rm "s3://${{ secrets.TF_STATE_BUCKET }}/${{ github.event.inputs.environment }}/terraform.tfstate"

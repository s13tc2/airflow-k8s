name: "Terraform Apply"
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to apply to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development
      confirm_apply:
        description: 'Type "apply" to confirm'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: "us-west-2"
  TF_LOG: info
  TERRAFORM_WORKING_DIR: "./src/terraform"
  CLUSTER_NAME: "airflow-cluster"

jobs:
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.confirm_apply == 'apply'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Clean Previous State
        run: |
          rm -rf .terraform .terraform.lock.hcl || true
          rm -rf ~/.kube/config ~/.kube/cache || true

          - name: Clean Existing Resources
          run: |
            # Get all VPCs with the cluster name tag
            VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${CLUSTER_NAME}*" --query 'Vpcs[*].VpcId' --output text)
            
            for VPC_ID in $VPC_IDS; do
              echo "Cleaning VPC: $VPC_ID"
              
              # Get and delete NAT Gateways
              NAT_GATEWAYS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[*].NatGatewayId' --output text)
              for NAT in $NAT_GATEWAYS; do
                echo "Deleting NAT Gateway: $NAT"
                aws ec2 delete-nat-gateway --nat-gateway-id $NAT
                
                echo "Waiting for NAT Gateway deletion..."
                aws ec2 wait nat-gateway-deleted --nat-gateway-id $NAT
              done
              
              # Delete Load Balancers
              LBS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?VpcId==`'$VPC_ID'`].LoadBalancerArn' --output text)
              for LB in $LBS; do
                echo "Deleting Load Balancer: $LB"
                aws elbv2 delete-load-balancer --load-balancer-arn $LB
              done
              
              # Get and release Elastic IPs
              EIPS=$(aws ec2 describe-addresses --query 'Addresses[?Domain==`vpc`].AllocationId' --output text)
              for EIP in $EIPS; do
                echo "Releasing Elastic IP: $EIP"
                aws ec2 release-address --allocation-id $EIP || true
              done
              
              # Delete EKS Cluster if it exists
              if aws eks describe-cluster --name $CLUSTER_NAME --region ${{ env.AWS_REGION }} 2>/dev/null; then
                echo "Deleting EKS cluster: $CLUSTER_NAME"
                
                # Delete all node groups first
                NODEGROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --query 'nodegroups[*]' --output text)
                for NG in $NODEGROUPS; do
                  echo "Deleting node group: $NG"
                  aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NG
                  aws eks wait nodegroup-deleted --cluster-name $CLUSTER_NAME --nodegroup-name $NG
                done
                
                # Delete the cluster
                aws eks delete-cluster --name $CLUSTER_NAME
                aws eks wait cluster-deleted --name $CLUSTER_NAME
              fi
              
              # Delete subnets
              SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text)
              for SUBNET in $SUBNETS; do
                echo "Deleting subnet: $SUBNET"
                aws ec2 delete-subnet --subnet-id $SUBNET || true
              done
              
              # Detach and delete internet gateway
              IGW=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[*].InternetGatewayId' --output text)
              if [ ! -z "$IGW" ]; then
                echo "Detaching and deleting Internet Gateway: $IGW"
                aws ec2 detach-internet-gateway --internet-gateway-id $IGW --vpc-id $VPC_ID
                aws ec2 delete-internet-gateway --internet-gateway-id $IGW
              fi
              
              # Delete route tables
              RTS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main != `true`].RouteTableId' --output text)
              for RT in $RTS; do
                echo "Deleting route table: $RT"
                aws ec2 delete-route-table --route-table-id $RT || true
              done
              
              # Delete network interfaces
              ENIS=$(aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
              for ENI in $ENIS; do
                echo "Deleting network interface: $ENI"
                aws ec2 delete-network-interface --network-interface-id $ENI || true
              done
              
              # Delete security groups (except default)
              SGS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
              for SG in $SGS; do
                echo "Deleting security group: $SG"
                aws ec2 delete-security-group --group-id $SG || true
              done
              
              # Finally delete the VPC
              echo "Deleting VPC: $VPC_ID"
              aws ec2 delete-vpc --vpc-id $VPC_ID || true
            done
          continue-on-error: true

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="cluster_name=$CLUSTER_NAME" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          terraform apply -auto-approve -input=false tfplan

      - name: Verify Cluster
        if: success()
        run: |
          echo "Waiting for cluster to be ready..."
          aws eks wait cluster-active \
            --name $CLUSTER_NAME \
            --region ${{ env.AWS_REGION }}

          echo "Configuring kubectl..."
          aws eks update-kubeconfig \
            --name $CLUSTER_NAME \
            --region ${{ env.AWS_REGION }}

          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=ready nodes --all --timeout=10m

      - name: Output Cluster Info
        if: success()
        run: |
          echo "Cluster Info:"
          kubectl cluster-info

          echo "Node Status:"
          kubectl get nodes

          echo "Airflow Status:"
          kubectl get pods -n airflow
          echo "Airflow Webserver URL:"
          kubectl get svc -n airflow airflow-webserver
